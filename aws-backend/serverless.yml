service: serverless-chat

provider:
  name: aws
  runtime: nodejs14.x
  stackName: ${self:service}-${self:provider.stage}
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-1'}
  tags:
    project: chat
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:*:*:**/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Query"
        - "dynamodb:Scan"
      Resource:
        - Fn::GetAtt: [ChatConnectionsTable, Arn]
        - Fn::GetAtt: [ChatHistoryTable, Arn]
        - Fn::Join:
            - "/"
            - - Fn::GetAtt: [ChatConnectionsTable, Arn]
              - "*"
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl: https://cognito-idp.eu-west-1.amazonaws.com/eu-west-1_OV4db5SvL
        audience: 7e4gp9lh414sg0qjaavh9pvhoo
  environment:
    CHATCONNECTION_TABLE:
      Ref: ChatConnectionsTable
    CHATHISTORY_TABLE:
      Ref: ChatHistoryTable
  websocketApiName: websocket-chat-${self:provider.stage}
  websocketApiRouteSelectionExpression: $request.body.action

functions:
  connectionManager:
    handler: handler.connectionManager
    events:
      - websocket:
          route: $connect
          authorizer:
            name: "authFunc"
            identitySource:
              - "route.request.querystring.token"
      - websocket:
          route: $disconnect
  authFunc:
    handler: handler.authFunc

  defaultMessages:
    handler: handler.defaultMessage
    events:
      - websocket:
          route: $default
  sendMessage:
    handler: handler.sendMessage
    events:
      - websocket:
          route: sendMessage
  getConnectedList:
    handler: handler.getConnectedList
    events:
      - websocket:
          route: getConnectedList
  chatHistory:
    handler: handler.chatHistory
    events:
      - httpApi:
          method: GET
          path: /history
          authorizer: serviceAuthorizer

resources:
  Resources:
    ChatConnectionsTable: ${file(resources/chatConnectionsTable.yml)}
    ChatHistoryTable: ${file(resources/chatHistoryTable.yml)}
